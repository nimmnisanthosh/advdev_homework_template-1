#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = ""
      // Set the tag for the production image: version
      def prodTag = ""

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build
      }

      // TBD: The next two stages should run in parallel

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"

        // TBD: Execute Unit Tests
      }

      // Using Maven to call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"

        // TBD: Execute Sonarqube Tests
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // TBD: Build Image, tag Image
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry

        // TBD: Tag the built image with the production tag.
      }

     // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding

        script {
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                    // TBD: 1. Determine which application is active
                    activeApp = openshift.selector("route", "tasks").object().spec.to.name
                    if (activeApp == "tasks-green") {
                        destApp = "tasks-blue"
                    }
                    echo "Active Application:      " + activeApp
                    echo "Destination Application: " + destApp
                
                    // 2. Update the image for the other application
                    // Update the Image on the Production Deployment Config
                    def dc = openshift.selector("dc/${destApp}").object()
                    // 3. Deploy into the other application
                    dc.spec.template.spec.containers[0].image="docker-registry.default.svc:5000/${devProject}/tasks:${prodTag}"
                    dc.spec.template.spec.containers[0].env[0].value='${prodTag} (${destApp})'
                    openshift.apply(dc)
                    // 4. Update Config maps for other application
                    openshift.selector("configmap", "${destApp}-config").delete()
                    def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

                    // Deploy the inactive application.
                    openshift.selector("dc", "${destApp}").rollout().latest();
                    //  5. Wait until application is running
                    // Wait for application to be deployed
                    def dc_prod = openshift.selector("dc", "${destApp}").object()
                    def dc_version = dc_prod.status.latestVersion
                    def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                    echo "Waiting for ${destApp} to be ready"
                    while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                        sleep 200
                        rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                    }
                }
            }
        }      
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch    
        script {
            // TBD: After approval execute the switch
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                    def route = openshift.selector("route/tasks").object()
                    route.spec.to.name="${destApp}"
                    openshift.apply(route)
                }
            }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
